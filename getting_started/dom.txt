.. _dom:

****************
DOM Manipulation 
****************

The easiest way to get started with YUI is to use *SimpleYUI*. The SimpleYUI file is a convenient package of YUI's most fundamental functionality: DOM tasks, event abstraction, UI effects, and AJAX. 

All examples in this tutorial are variations on a minimal but valid HTML5 document. For brevity, we will sometimes only display the relevant JavaScript code. In general, you can assume that any example code you see is running in a document that resembles:

.. literalinclude:: examples/skeleton.html
	:language: html
	:linenos:

In this skeleton document, the first ``<script>`` element does two things:

1. It pulls in the minified, gzipped SimpleYUI file from Yahoo's `CDN <http://en.wikipedia.org/wiki/Content_delivery_network>`_. While you can always download and store a local copy of YUI, using the CDN is faster and more convenient.

2. It instantiates a global YUI object named ``Y`` for immediate use. You can access the entire YUI library through this object. 

.. note
	Production-quality YUI applications generally avoid using SimpleYUI. Instead, developers take advantage of YUI's powerful modularization patterns to load only the code they need into safe, isolated sandboxes. Later in this tutorial, we'll move beyond SimpleYUI's limitations and explore these more advanced features. But for simple apps and demonstrations, SimpleYUI is just fine.

.. _getting-a-node:

Getting a Node
==============

The ``Y.one()`` method makes it easy to select and manipulate a single element on the page. ``Y.one()`` takes a CSS selector and returns a `Node <http://developer.yahoo.com/yui/3/api/Node.html>`_ object. Once you have a ``Node``, it is easy to change its properties by calling additional methods. 

:download:`Example 1 <examples/dom-highlight-one.html>` uses YUI to dynamically add a class to a ``<div>``, turning it red.

.. literalinclude:: examples/dom-highlight-one.html
	:language: html
	:linenos:
	
``Y.one()`` selects the element with an ``id`` of ``demo`` and creates a ``Node`` object to represent it. We then call the `addClass() <http://developer.yahoo.com/yui/3/api/Node.html#method_addClass>`_ method, which adds the ``.highlight`` class to the element. If we load the document with JavaScript enabled, the ``<div>`` is highlighted red.

Of course, we could have easily highlighted the ``<div>`` with CSS alone. Let's try something a little more interesting.

In :download:`Example 2 <examples/dom-highlight-one-onclick.html>`, the ``<div>`` starts out unstyled. But as soon you click anywhere in the document, the ``<div>`` turns red.

.. literalinclude:: examples/dom-highlight-one-onclick.html
	:linenos:
	:lines: 11-15

This time, we call ``Y.one()`` twice. The first call is the same as before: it selects the element with an ``id`` of ``demo``, so that we can add the ``.highlight`` class. We've wrapped this in a function named ``highlightDiv``. We then attach an event to the document by calling the `on() <http://developer.yahoo.com/yui/3/api/EventTarget.html#method_on>`_ method, which requires at least two arguments:

* A string indicating the event to listen for (such as ``"click"`` or ``"mouseover"``).
* An event handler function to trigger when the event occurs.

Here, we've assigned ``highlightDiv`` to be a click event that will trigger for the entire document. If you click anywhere in the document, the browser executes ``highlightDiv`` and does exactly what Example 1 did.

.. note:: 
    Example 2 uses a named function to handle the event. An alternative, but very convenient way to work with event handlers is to use anonymous (nameless) functions Anonymous functions are common in JavaScript, but if you're coming to this tutorial from another language, this idiom might look unfamiliar. Rewritten with a named function, the code would look like this:

    .. code-block:: javascript
      :linenos:

	  Y.one("document").on("click", function(e) {
	    Y.one("#demo").addClass("highlight");
	  });

Getting Lots of Nodes
=====================

The ``Y.all()`` method is similar to ``Y.one()``, except that when you give it any `CSS 3 selector <http://www.w3.org/TR/css3-selectors/>`_, it selects and returns multiple nodes as a `NodeList <http://developer.yahoo.com/yui/3/api/NodeList.html>`_ object. For example:: 

  Y.all("p");

returns a ``NodeList`` containing all paragraphs in the document. The ``NodeList`` provides an ``each()`` method that enables you to iterate over each node in the list, applying a function::

  function highlightPara(node) {
    node.addClass("highlight");
  };  

  Y.all("p").each(highlightPara);

The ``each()`` method supplies the current node as ``highlightPara``'s first argument. Thus, we can call ``addClass()`` on the node, just as we did earlier.

Alternatively, we can do the same thing using an anonymous function::

  Y.all("p").each(function(node) {
    node.addClass("highlight");
  });

which is a little more compact.

Conveniently, a number of ``NodeList`` methods are similar to ``Node`` methods. For example, ``NodeList``'s ``addClass()`` method does essentially the same thing as the ``Node``'s, except that it adds a class to every node in the list. This means that if we're doing something very simple like adding a class, we can make our example even *more* compact::

  Y.all("p").addClass("highlight");

However, if you need to apply a general function, use ``each()``.

.. _changing-node-properties:

Changing Node Properties
========================

Once you select a node using ``Y.one()`` or ``Y.all()``, you can do a lot more than just add and remove classes. This section provides a taste of the full `Node API <http://developer.yahoo.com/yui/3/api/Node.html>`_.

Changing Content
----------------

:download:`Example 4 <examples/dom-append.html>` demonstrates appending and replacing content:

.. literalinclude:: examples/dom-append.html
	:language: html
	:linenos:

``Node.append()`` inserts the supplied string or element as the node's last child, while ``Node.setContent()`` replaces all of the node's content with the new string or element. Both methods automatically convert strings of HTML markup (such as ``"<p>Some text</p>"``) to HTML before doing the insert.

Getting and Setting DOM Attributes
----------------------------------

Under the covers, a ``Node`` object is a wrapper for a native DOM node object. If you are familiar with the DOM, you can use ``Node.get()`` and ``Node.set()`` to freely read and write DOM attributes such as ``parentNode`` and ``firstChild``. For example, in::

  var node = Y.one("#foo");
  var parent = node.get("parentNode");

the ``parent`` variable holds ``#foo``'s parent node, as a YUI ``Node`` object.

You can also use ``set`` to change the content of the attribute, by setting the ``innerText`` attribute. In fact, ::

  Y.one("#foo").set("innerHTML", "<li>GOODBYE COMRADE</li>");

is equivalent to our earlier ::

  Y.one("#demo").setContent("<li>GOODBYE COMRADE</li>");

.. TODO: is a complete list of attributes documented? It's not just the DOM Node attributes, there are many more, some non-standard...? 

Moving Nodes
------------

You can use ``Node.setXY()`` to move a node to a new absolute location on the page. For example, to move an element 100 pixels to the right and 200 pixels down, as measured from the top left corner of the page::

  Y.one("#demo").setXY([100, 200]);

You can use ``setXY()`` along with some properties of the Event object to create some interesting effects with very little code. We've already seen useful methods like :ref:`preventDefault() <creating-highlight-function>`, but the Event object also carries information about the event itself, including ``e.pageX`` and ``e.pageY``. This means you can capture the click's X,Y coordinates anywhere on the page and use them to move a node around, as shown in :download:`Example 5 <examples/dom-follow-my-click.html>`.

.. literalinclude:: examples/dom-follow-my-click.html
	:lines: 17-19

Creating Transitions
--------------------

YUI has two modules that deal with animations: the `Animation utility <http://developer.yahoo.com/yui/3/anim/>`_ for advanced animations, and the `Transition utility <http://developer.yahoo.com/yui/3/transition/>`_ for implementing fades and other common transitions on nodes. The Transition utility is simpler than the Animation utility, but still flexible enough to create a wide variety of effects.

To create a transition, you call ``Node.transition()``. The ``transition()`` method takes two parameters:

* A configuration object describing how the transition should behave and the the CSS properties to transition to
* An optional callback function to execute when the transition completes

A simple fade transition is easy; we just transition the node from its current CSS opacity to 0 (fully transparent)::

  Y.one("#demo").transition({opacity:0});

If you try out this transition, you'll notice that the node fades from view pretty quickly. This might work well for certain use cases, such as dismissing a dialog box. However, if you want to slow down the fade or otherwise control its behavior, you must provide more configuration information::

  Y.one("#demo").transition({
    duration: 2,
    delay: 1,
    easing: "ease-out",
    opacity: 0
  });

This changes the behavior as follows:

* Increases the transition's duration to two seconds, from the YUI default of 0.5 seconds. 
* Adds a delay before starting the transition of 1 second. The YUI default is 0 seconds.
* Changes the easing algorithm to ``ease-out``, which begins the transition quickly and then decelerates at the end. You can also specify other options such as ``ease-out``, which begins the transition slowly and accelerates at the end. The YUI default behavior is ``ease``.

.. TODO not sure what the default value of 'ease' does, exactly.

While the above transitions cause the node to fade and disappear, the node is still present in the DOM. To remove the node entirely after the fade completes, we can just add a callback function::

  Y.one("#demo").transition({
    duration: 2,
    delay: 1,
    easing: "ease-out",
    opacity: 0
  }, function() {
    this.remove();
  });

Beyond simply messing with the node's opacity, we can also construct transitions that operate on several CSS properties at once. For example, this transition changes the height, width, and background color of the node simultaneously::

  Y.one("#demo").transition({
    duration: 2,
    delay: 1,
    easing: "ease-out",
    height: "150px",
    width: "300px",
    backgroundColor: "#c00"
  });

For even more fine-grained control, we can set separate durations, delays, and easings on each CSS property. :download:`Example 6 <examples/dom-transition.html>` puts it all together:

.. literalinclude:: examples/dom-transition.html
	:lines: 17-35

The ``height`` and ``background`` properties have their own ``duration``, ``delay``, and ``easing`` settings, which override the values set at the top.
