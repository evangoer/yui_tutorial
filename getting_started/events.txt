.. _events:

******
Events
******

In the last chapter, :ref:`dom`, we had a few examples of events such as:

.. code-block:: javascript

   Y.one("document").on("click", function(e) {
     Y.one("#demo").addClass("highlight");
   });

But this hardly does events justice, as they are critically important in JavaScript programming. As longtime JavaScript advocate `Peter-Paul Koch (ppk) puts it <http://www.quirksmode.org/js/introevents.html>`_, 

  "**Events are the beating heart of any JavaScript application.** ... Without events there are no scripts. Take a look at any web page with JavaScript in it: in nearly all cases there will be an event that triggers the script. The reason is very simple. JavaScript is meant to add interactivity to your pages: the user does something and the page reacts."

However, events can be tricky to use effectively thanks to browser inconsistencies and bugs. Fortunately, YUI provides an event API that:

* provides a consistent interface across all major browsers
* supports event delegation, which enables your application to efficiently respond to document changes without creating huge numbers of event listeners
* improves application responsiveness by enabling you to start listening ahead of DOM availability
* provides synthetic events that can simulate new DOM events, such as "tripleclick", "hover", or "clickoutside" 

Adding Events
=============

YUI provides two main methods for adding events. We've already seen subscribing to events with ``Node``'s ``on()`` method::

  var link = Y.one("#demo");
  link.on("click", handler);

Alternatively, you can skip selecting the node directly, and just call ``on()`` from the YUI global object::

  Y.on("click", handler, "#demo");

depending on whether you need to reuse the node or not. 

In a lot of JavaScript code in the wild, you will see code that resembles::

  <a href="..." onclick="handler();">...</a>

Never do this. Inline events are bad practice in JavaScript, in much the same way that inline styles are bad practice in CSS. Web pages and web applications should always separate presentation (CSS) and behavior (JavaScript) from their markup. When using YUI, always apply your events with the ``on()`` method.

Delegating Events
-----------------

*Event delegation* assigns a single event handler on a parent element to listen for interactions on descendant elements. You can use delegation to avoid the expensive process of having to create and assign lots of individual listeners.

Delegation operates almost exactly like using the ``on()`` method. You can delegate from a node object::

  var node = Y.one('#demo');
  node.delegate('click', handler);

or from the YUI object::

  Y.delegate('#demo').delegate('click', handler);

By default, ``delgate()`` applies the handler function to all descendant elements. However, you can supply a third optional selector argument to act as a filter. For example, this code snippet attaches the ``handler()`` function to all descendants of ``#demo`` that are also list items::

  Y.delegate('#demo').delegate('click', handler, 'li');

In :download:`Example 2 <examples/events-delegate-highlight.html>`, we use this technique to attach a click handler to multiple elements at once. Clicking on an element highlights the element, if and only if the element has a class of ``fruit``.

.. literalinclude:: examples/events-delegate-highlight.html
	:linenos:
	:lines: 18-21

.. note::

   The ``highlight()`` function above is a little bit tricky -- what going on with ``this.addClass()``? In JavaScript, the ``this`` object is a special construct that is always present inside a function. In an event handler, YUI automatically sets ``this`` to be the node where the event occurred, which conveniently enables us to manipulate or capture information about the node in questionm. For more information about ``this`` and event targets, refer to :ref:`stay_on_target`.

Waiting for the DOM
-------------------

When writing JavaScript apps, you want your code to initialize and start running as fast as possible. But how do you know when the DOM is ready?

One solution is to use the common ``window.onload()`` function to start running your JavaScript. Unfortunately, this event fires after the browser has determined how to render the entire page, and even after all image files have fully loaded. This means that for complex pages or pages with large images, the user can easily start trying to interact with your page before your code is ready to run. This can lead to embarrassing situations where the user selects a menu item or tab... only to discover that nothing happens. Your site appears broken.

To help you create more responsive pages, YUI provides three *synthetic events* to support DOM loading. A synthetic event is a new event in the DOM system. You can `build your own synthetic events <http://developer.yahoo.com/yui/3/api/Event.html#method_Event.define>`_, but YUI also provides a number of useful ones out of the box, including:

``Y.on("available", handler, "#image");``
  The ``available`` event defines a function to execute as soon as an element is detected in the DOM, but before the element's children are ready. Don't use ``available`` for elements that *might* be in the document eventually, just for elements that are in the process of loading. For example, you could use ``available`` on an ``<image>`` element to start manipulating the element's ``src`` as quickly as possible.

``Y.on("contentready", handler, "#container");``
  The ``contentready`` event is similar to ``available``, except that it waits for the target element and all its children to be detected in the DOM. For example, you could use ``contentready`` on a ``<ul>`` element to begin turning the unordered list and its child list elements into an interactive navigation widget.

``Y.on("domready", handler);`` 
  The ``domready`` event is not assigned to a particular node. It defines a function to execute as soon as the entire DOM is in a usable state. The ``domready`` event fires before image files are loaded.

  .. warning:: 
     Inserting information into the DOM before the DOM is complete can lead to crashes.

Executing Events
================

Executing Events
	simple destroy
	giant example with adding classes
	bubbling, halt, stoppropagation
	this + targets


.. _stay_on_target:

Targets and 'this'
------------------

[TODO] 

.. more asteroids
   add transitions in anim section

.. event programmers should be concerned with 'this'. e.target -- the most specific thing that received the event (the span inside the a)  and e.currentTarget -- where it was subscribed from (less complex)

   YUI 3 defaults 'this' to be the node instance you subscribed from. Y.one(blah) -- this = blah

   More detail about setting 'this' and config options


Show that the 'this' in the callback is the node::

   function callback(e) { 
   // this === commentInput 
     Y.log( this.get("value") ); 
   } 

   var commentInput = Y.one("#comment"); 
   commentInput.on("blur", callback);


.. TODO see lucassmith.name/pub/this.html


Bubbling and Propagation
------------------------

[TODO]

.. here is the node you subscribe from, here are some common properties
   for a deeper discussion about how bubbling works, how this is set, 
   goto my fancy 'this + targets' section

   pry out the targets discussion and merge with 'this'

show preventDefault -- this is also done in the big "Passing Arguments section"

Example from Luke's slides: override form behavior::

   node.on("submit", function(e) {
     e.preventDefault();
     this.addClass("submitted");  // 'this' is the node (as one might hope). Can set 'this' in the handler.
   });

show how stopPropagation works (and show halt)

show difference between e.target & e.currentTarget

for fun, implement the `Asteroids bookmarklet <http://erkie.github.com/>`_ in three lines of code! (well, not really) ::

  Y.all("*").on("click", function(e) {
    e.target.remove();
  });


Passing Arguments to Event Handlers
-----------------------------------

.. TODO when getting lots of nodes, want to iterate
	Also don't do event subscriptions on NodeList. It doesn't do what you expect with 'this'. 'this' should refer to the Node that the event was attached to. But: 1) we provide a delegate method, which overrides this. 2) NodeList.on("click" foo) -- inside that function 'this' is the NodeList, not the node! From inside the callback, you will always have access to the node via e.currentTarget. 'this' is the only reference to the NodeList itself. 3) Passing in a context override -- passing in 'this' is passing the global object. So pass in null instead... 

[TODO fix intro]

Let's take a look at how ``Y.all()`` works with CSS selectors in more detail. 

:download:`Example 2 <examples/events-highlight-all.html>` provides a new HTML page with some interesting structure and CSS classes to select on. The page also includes some links for us to attach events.

.. literalinclude:: examples/events-highlight-all.html
	:language: html
	:linenos:
	:lines: 1-30

To this page, we add some JavaScript:

.. literalinclude:: examples/events-highlight-all.html
	:linenos:
	:lines: 33-43

.. _creating-highlight-function:

Creating a highlight() function
-------------------------------

The ``highlight()`` function is an event handler that visually highlights the elements that were selected. Into this function, YUI passes:

* ``e`` -- an object representing event that triggered. We actually saw this parameter back in :ref:`getting-a-node`. Earlier, we just ignored it, but this time, we're going to do something with it.
* ``selector`` -- a CSS selector, such as ``"li.foo"``. This selector represents the elements we want to highlight.

.. literalinclude:: examples/events-highlight-all.html
	:linenos:
	:lines: 33-37

The first line overrides the browser's default click behavior. Ordinarily, clicking on a link takes you to the link's location. Calling ``preventDefault()`` on the click event prevents this default behavior. To make what we're doing absolutely clear, the ``href`` of each link points to the home pages of some of our favorite JavaScript libraries. Thanks to ``preventDefault()``, the value of the ``href`` is irrelevant; clicking the links does not actually take us off the page. We'll see more useful event methods later on in :ref:`changing-node-properties` and again in :ref:`events`. [TODO might be able to shorten this paragraph since we're going to talk about preventDefault earlier]

The second line selects all nodes with a class of ``highlight`` on the page and then removes the ``highlight`` class from each node. This resets the page to its initial, un-highlighted state.

Finally, the third line does the highlighting work. ``Y.all()`` takes the CSS selector we passed in, selects the appropriate nodes and highlights them.

Adding events
-------------

Now, all that's left is to attach some events to the links. Use ``Y.one()`` to grab the anchor node, use ``.on()`` to attach a click event with a ``highlight()`` handler, and... we're done, right? Something like this::

  Y.one("#first").on("click", highlight(e, ".baz"));

Unfortunately, this doesn't work. The problem is that we want to pass an event handler function into ``on()`` to be executed *later*, when the event triggers. But in the above code, ``highlight(e, ".baz")`` executes *now*, and so what we're really doing is::

  Y.one("#first").on("click", returned-value-of-executing-highlight);


.. TODO -- move this stuff out and highlight it -- people trip up over this alot

Unless ``highlight()`` returns a function (which it doesn't), this will fail. The click event may fire, but we didn't give it a valid handler function to execute, so nothing will happen.

There are two possible solutions:

1. Pass in ``highlight()``, but wrapped in an anonymous function to defer execution:: 

     Y.one("#first").on("click", function(e) {
       highlight(e, ".baz");
     });

   The key difference is this code *declares* an anonymous function, but does not actually *execute* it. YUI now has something valid to call when the event triggers. 

2. Use the extended form of the ``on()`` method. We've seen ``on()`` working with just two parameters, but the full form is::

     on(type, fn, context, args*)

   where:

     * ``type`` is the type of the event, such as "click".
     * ``fn`` is the function to call to handle the event.
     * ``context`` is the object where we are attaching the event. By default, the value of this parameter is the ``NodeList`` itself. We actually don't want to mess with this object, so we'll just explicitly set it to ``null``. 
     * ``args`` is one or more extra arguments to be passed into the handler function. Aha -- here is where we can supply our ``selector`` argument, or anything else extra that our handler function might need.

   So for our purposes, we could call ``on()`` with four arguments::

     Y.one("#first").on("click", highlight, this, ".baz");

   which again, passes our ``highlight()`` function and the argument it needs on to YUI, to be executed later. 

[TODO Could talk about Y.bind() instead -- a more generic function for binding. It's possible to create DOM events in YUI3 that you subscribe to with a different signature. Touch events, on a mobile device -- we have an event that covers both the touch & mouse event. If you want to subscribe to this generic event, in order to guarantee the arguments & contents are set properly, use Y.bind() is safer. (Though not quite as fast.) Read up on bind().]

Either form will work. We'll pick option #2 because it lets us declare our events more compactly::

  Y.one("#first").on("click", highlight, null, ".baz");
  Y.one("#second").on("click", highlight, null, "li.foo");
  Y.one("#third").on("click", highlight, null, ".foo .baz");
  Y.one("#fourth").on("click", highlight, null, ".foo > .baz");
  Y.one("#fifth").on("click", highlight, null, "li strong");

Try clicking on the links in :download:`Example 3 <examples/events-highlight-all.html>` while viewing the source. Does it highlight the links that you expect?




Removing Events
===============

[TODO]

How to remove events? Call detach. Talk about event categories

   - can detach if you have the handle (either fooHandle.detach() or Y.detach(fooHandle))
   - can detach all events of a certain category AND event type
   - can purge all events from an element (optionally including type and recursing to children)



Custom Events
=============


[TODO intro text]

pick a widget -- you can do all the same things with custom events that you can do with ordinary events



